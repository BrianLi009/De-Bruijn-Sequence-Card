import string
import random
import sys
#test_deck = list(range(1,14)) + list(range(1,14))+ list(range(1,14))+ list(range(1,14));
test_deck = 4*list(range(1,14))

#test_deck = [range(1,13) for _ in range(4)];
shuffled_deck = random.sample(test_deck, len(test_deck))

window_length=5

def Tie(deck):
    Tie=False
    for i in range(1,window_length):
        for j in range(0, len(deck) - i):
            if deck[j]==deck[i+j]:
                Tie=True
    return Tie

def TieIndex(deck):
    """Returns the index of the second occurence of a tie in a deck.
    If there is no tie, then it returns 0."""
    Tie=0
    for i in range(1,window_length):
        for j in range(0, len(deck) - i):
            if deck[j]==deck[i+j]:
                Tie=i+j
    return Tie


def GenerateNoTie(deck):
        new_deck = list(deck)
        #print new_deck;
        while Tie(new_deck):
            ## DO SOMETHING TO FIX TIE!
            index_of_tie=TieIndex(deck)
            new_deck=random.sample(new_deck,len(new_deck))
        return(new_deck)

def Order(cards):
    """Given a packet of cards, Order tells us about their rank order.
    It returns the indices of the cards listed by increasing rank.
    Thus, cards[Order[0]] is the lowest card, and cards[Order[N]] is the highest."""
    order=list(cards)
    order.sort()
    return map(lambda x : cards.index(x), order)

def TopThree(cards):
    order=list(Order(cards))
    return order[-3:]

def LMHCoding(deck):
    for i in range(0,len(deck) - window_length + 1):
        cards = list(deck[i:i+window_length])
        print(str(cards) + " --> " + str(TopThree(cards)))

def deBruijn(deck):
    deBruijn=True
    lookup_table = dict()
    for i in range(0,len(deck) - window_length + 1):
        cards = list(deck[i:i+window_length])
        if not str(TopThree(cards)) in lookup_table:
            # print TopThree(cards);
            #print str(cards) + "-->" + str(TopThree(cards));
            lookup_table[str(TopThree(cards))] = i
        else:
            #print str(cards) + "-->" + str(TopThree(cards));
            deBruijn=False
            return deBruijn
    return deBruijn

def generate_partial():
    """generate_partial function will generate a De Bruijn Sequence with length 39 (3 suits)"""
    for i in range(10**7):
        shuffled_deck = random.sample(test_deck, len(test_deck))
        if (not Tie(shuffled_deck) and (deBruijn(shuffled_deck))):
            print(shuffled_deck)
            print("This deck has a tie: " + str(Tie(shuffled_deck)))
            print("This deck is deBruijn: " + str(deBruijn(shuffled_deck)) + "\n")

# we eventually obtained this sequence

partial_deck = [8,10,4,2,7,1,11,10,3,5,12,8,6,3,7,9,4,6,11,10,13,1,5,2,7,13,12,5,1,4,3,2,9,11,13,8,6,12,9]
left_over = [1,2,3,4,5,6,7,8,9,10,11,12,13]
# these are the leftover cards that is not in the partial De Bruijn sequence just yet

def cyclic_bool(lst):
    first_four = lst[:4]
    lst.extend(first_four)
    return deBruijn(lst)

def insert_card(partial_deck, left_over):
    for num in left_over:
        copy_deck = partial_deck[:]
        for i in range(len(partial_deck)):
            copy_deck.insert(i, num)
            if (not Tie(copy_deck) and (deBruijn(copy_deck))):
                if num in left_over:
                    left_over.remove(num)
                insert_card(copy_deck, left_over)
            else:
                del copy_deck[i]
        if len(copy_deck)==52:
            if cyclic_bool(copy_deck) and not Tie(copy_deck):
                print (copy_deck)

for i in range(10000):
    shuffled_leftover = random.sample(left_over, len(left_over))
    insert_card(partial_deck, shuffled_leftover)


cyclic_final_deck = [13, 1, 10, 3, 9, 6, 12, 7, 8, 10, 11, 5, 4, 2, 7, 1, 11, 10, 3, 5, 12, 8, 6, 3, 7, 9, 4, 6, 11, 10, 13, 1, 5, 2, 7, 8, 13, 12, 5, 1, 4, 3, 2, 9, 11, 4, 13, 8, 6, 12, 2, 9, 13, 1, 10, 3]
print (Tie(cyclic_final_deck))
print ((deBruijn(cyclic_final_deck)))
print (len(cyclic_final_deck))
